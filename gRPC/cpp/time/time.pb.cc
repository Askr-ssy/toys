// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time.proto

#include "time.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace rpc_package
{
    class TimeRequestDefaultTypeInternal
    {
    public:
        ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeRequest> _instance;
    } _TimeRequest_default_instance_;
    class HelloReplyDefaultTypeInternal
    {
    public:
        ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HelloReply> _instance;
    } _HelloReply_default_instance_;
} // namespace rpc_package
static void InitDefaultsscc_info_HelloReply_time_2eproto()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::rpc_package::_HelloReply_default_instance_;
        new (ptr)::rpc_package::HelloReply();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::rpc_package::HelloReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloReply_time_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HelloReply_time_2eproto}, {}};

static void InitDefaultsscc_info_TimeRequest_time_2eproto()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::rpc_package::_TimeRequest_default_instance_;
        new (ptr)::rpc_package::TimeRequest();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::rpc_package::TimeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeRequest_time_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeRequest_time_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_time_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const **file_level_enum_descriptors_time_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_time_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_time_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::rpc_package::TimeRequest, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::rpc_package::TimeRequest, tz_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::rpc_package::HelloReply, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::rpc_package::HelloReply, time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, sizeof(::rpc_package::TimeRequest)},
    {6, -1, sizeof(::rpc_package::HelloReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::rpc_package::_TimeRequest_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::rpc_package::_HelloReply_default_instance_),
};

const char descriptor_table_protodef_time_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\ntime.proto\022\013rpc_package\"\031\n\013TimeRequest"
    "\022\n\n\002tz\030\001 \001(\t\"\032\n\nHelloReply\022\014\n\004time\030\001 \001(\t"
    "2N\n\013TimeService\022\?\n\010SayHello\022\030.rpc_packag"
    "e.TimeRequest\032\027.rpc_package.HelloReply\"\000"
    "b\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *const descriptor_table_time_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase *const descriptor_table_time_2eproto_sccs[2] = {
    &scc_info_HelloReply_time_2eproto.base,
    &scc_info_TimeRequest_time_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_time_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_time_2eproto = {
    false,
    false,
    descriptor_table_protodef_time_2eproto,
    "time.proto",
    168,
    &descriptor_table_time_2eproto_once,
    descriptor_table_time_2eproto_sccs,
    descriptor_table_time_2eproto_deps,
    2,
    0,
    schemas,
    file_default_instances,
    TableStruct_time_2eproto::offsets,
    file_level_metadata_time_2eproto,
    2,
    file_level_enum_descriptors_time_2eproto,
    file_level_service_descriptors_time_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_time_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_time_2eproto)), true);
namespace rpc_package
{

    // ===================================================================

    void TimeRequest::InitAsDefaultInstance()
    {
    }
    class TimeRequest::_Internal
    {
    public:
    };

    TimeRequest::TimeRequest(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena)
    {
        SharedCtor();
        RegisterArenaDtor(arena);
        // @@protoc_insertion_point(arena_constructor:rpc_package.TimeRequest)
    }
    TimeRequest::TimeRequest(const TimeRequest &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        tz_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        if (!from._internal_tz().empty())
        {
            tz_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tz(),
                    GetArena());
        }
        // @@protoc_insertion_point(copy_constructor:rpc_package.TimeRequest)
    }

    void TimeRequest::SharedCtor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeRequest_time_2eproto.base);
        tz_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }

    TimeRequest::~TimeRequest()
    {
        // @@protoc_insertion_point(destructor:rpc_package.TimeRequest)
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    void TimeRequest::SharedDtor()
    {
        GOOGLE_DCHECK(GetArena() == nullptr);
        tz_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }

    void TimeRequest::ArenaDtor(void *object)
    {
        TimeRequest *_this = reinterpret_cast<TimeRequest *>(object);
        (void)_this;
    }
    void TimeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
    {
    }
    void TimeRequest::SetCachedSize(int size) const
    {
        _cached_size_.Set(size);
    }
    const TimeRequest &TimeRequest::default_instance()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeRequest_time_2eproto.base);
        return *internal_default_instance();
    }

    void TimeRequest::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:rpc_package.TimeRequest)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        tz_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *TimeRequest::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
        (void)arena;
        while (!ctx->Done(&ptr))
        {
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            CHK_(ptr);
            switch (tag >> 3)
            {
            // string tz = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10))
                {
                    auto str = _internal_mutable_tz();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpc_package.TimeRequest.tz"));
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
            {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0)
                {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
            } // switch
        }     // while
    success:
        return ptr;
    failure:
        ptr = nullptr;
        goto success;
#undef CHK_
    }

    ::PROTOBUF_NAMESPACE_ID::uint8 *TimeRequest::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:rpc_package.TimeRequest)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        // string tz = 1;
        if (this->tz().size() > 0)
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_tz().data(), static_cast<int>(this->_internal_tz().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "rpc_package.TimeRequest.tz");
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_tz(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:rpc_package.TimeRequest)
        return target;
    }

    size_t TimeRequest::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:rpc_package.TimeRequest)
        size_t total_size = 0;

        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string tz = 1;
        if (this->tz().size() > 0)
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_tz());
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
        }
        int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void TimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
    {
        // @@protoc_insertion_point(generalized_merge_from_start:rpc_package.TimeRequest)
        GOOGLE_DCHECK_NE(&from, this);
        const TimeRequest *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeRequest>(
                &from);
        if (source == nullptr)
        {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_package.TimeRequest)
            ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
        }
        else
        {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_package.TimeRequest)
            MergeFrom(*source);
        }
    }

    void TimeRequest::MergeFrom(const TimeRequest &from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:rpc_package.TimeRequest)
        GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        if (from.tz().size() > 0)
        {
            _internal_set_tz(from._internal_tz());
        }
    }

    void TimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
    {
        // @@protoc_insertion_point(generalized_copy_from_start:rpc_package.TimeRequest)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    void TimeRequest::CopyFrom(const TimeRequest &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:rpc_package.TimeRequest)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool TimeRequest::IsInitialized() const
    {
        return true;
    }

    void TimeRequest::InternalSwap(TimeRequest *other)
    {
        using std::swap;
        _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
        tz_.Swap(&other->tz_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata TimeRequest::GetMetadata() const
    {
        return GetMetadataStatic();
    }

    // ===================================================================

    void HelloReply::InitAsDefaultInstance()
    {
    }
    class HelloReply::_Internal
    {
    public:
    };

    HelloReply::HelloReply(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena)
    {
        SharedCtor();
        RegisterArenaDtor(arena);
        // @@protoc_insertion_point(arena_constructor:rpc_package.HelloReply)
    }
    HelloReply::HelloReply(const HelloReply &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        if (!from._internal_time().empty())
        {
            time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time(),
                      GetArena());
        }
        // @@protoc_insertion_point(copy_constructor:rpc_package.HelloReply)
    }

    void HelloReply::SharedCtor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HelloReply_time_2eproto.base);
        time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }

    HelloReply::~HelloReply()
    {
        // @@protoc_insertion_point(destructor:rpc_package.HelloReply)
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    void HelloReply::SharedDtor()
    {
        GOOGLE_DCHECK(GetArena() == nullptr);
        time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }

    void HelloReply::ArenaDtor(void *object)
    {
        HelloReply *_this = reinterpret_cast<HelloReply *>(object);
        (void)_this;
    }
    void HelloReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
    {
    }
    void HelloReply::SetCachedSize(int size) const
    {
        _cached_size_.Set(size);
    }
    const HelloReply &HelloReply::default_instance()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HelloReply_time_2eproto.base);
        return *internal_default_instance();
    }

    void HelloReply::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:rpc_package.HelloReply)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *HelloReply::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
        (void)arena;
        while (!ctx->Done(&ptr))
        {
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            CHK_(ptr);
            switch (tag >> 3)
            {
            // string time = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10))
                {
                    auto str = _internal_mutable_time();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpc_package.HelloReply.time"));
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
            {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0)
                {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
            } // switch
        }     // while
    success:
        return ptr;
    failure:
        ptr = nullptr;
        goto success;
#undef CHK_
    }

    ::PROTOBUF_NAMESPACE_ID::uint8 *HelloReply::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:rpc_package.HelloReply)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        // string time = 1;
        if (this->time().size() > 0)
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "rpc_package.HelloReply.time");
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_time(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:rpc_package.HelloReply)
        return target;
    }

    size_t HelloReply::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:rpc_package.HelloReply)
        size_t total_size = 0;

        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string time = 1;
        if (this->time().size() > 0)
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_time());
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
        }
        int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void HelloReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
    {
        // @@protoc_insertion_point(generalized_merge_from_start:rpc_package.HelloReply)
        GOOGLE_DCHECK_NE(&from, this);
        const HelloReply *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HelloReply>(
                &from);
        if (source == nullptr)
        {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpc_package.HelloReply)
            ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
        }
        else
        {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:rpc_package.HelloReply)
            MergeFrom(*source);
        }
    }

    void HelloReply::MergeFrom(const HelloReply &from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:rpc_package.HelloReply)
        GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        if (from.time().size() > 0)
        {
            _internal_set_time(from._internal_time());
        }
    }

    void HelloReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
    {
        // @@protoc_insertion_point(generalized_copy_from_start:rpc_package.HelloReply)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    void HelloReply::CopyFrom(const HelloReply &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:rpc_package.HelloReply)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool HelloReply::IsInitialized() const
    {
        return true;
    }

    void HelloReply::InternalSwap(HelloReply *other)
    {
        using std::swap;
        _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
        time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata HelloReply::GetMetadata() const
    {
        return GetMetadataStatic();
    }

    // @@protoc_insertion_point(namespace_scope)
} // namespace rpc_package
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::rpc_package::TimeRequest *Arena::CreateMaybeMessage<::rpc_package::TimeRequest>(Arena *arena)
{
    return Arena::CreateMessageInternal<::rpc_package::TimeRequest>(arena);
}
template <>
PROTOBUF_NOINLINE ::rpc_package::HelloReply *Arena::CreateMaybeMessage<::rpc_package::HelloReply>(Arena *arena)
{
    return Arena::CreateMessageInternal<::rpc_package::HelloReply>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
